---
import Social from '../components/Social.astro';

interface Props {
    title: string;
    description: string;
    date: string;
    link?: string;
}

const { title, description, date, link } = Astro.props;

// Determinar si la descripción es larga (más de 150 caracteres)
const isLongDescription = description.length > 150;
// Crear versión corta de la descripción
const shortDescription = isLongDescription ? description.slice(0, 150) + '...' : description;
---

<span class="absolute flex items-center justify-center w-6 h-6 bg-white rounded-full -start-3 ring-8 ring-white">
    <svg class="w-3.5 h-3.5 text-blue-900" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
        <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
    </svg>
</span>
<div class="flex flex-col gap-1 ml-2">
    <h3 class="mb-1 text-lg font-semibold text-white opacity-80">{title}</h3>
    <time class="block mb-2 text-sm font-normal leading-none text-orange-200 opacity-70">{date}</time>
    
    {isLongDescription ? (
        <div class="description-container">
            <p class="text-base font-normal text-white opacity-80 text-wrap description-short">{shortDescription}</p>
            <p class="text-base font-normal text-white opacity-80 text-wrap description-full hidden">{description}</p>
            <button class="text-blue-400 hover:text-blue-300 mt-1 text-sm toggle-description" data-action="expand">Ver más</button>
        </div>
    ) : (
        <p class="text-base font-normal text-white opacity-80 text-wrap">{description}</p>
    )}
    
    {link && (
        <Social href={link}>
            Ir al sitio
        </Social>
    )}
</div>

<script>
    // Agregar event listeners a todos los botones de toggle
    document.addEventListener('DOMContentLoaded', () => {
        const toggleButtons = document.querySelectorAll('.toggle-description');
        
        toggleButtons.forEach(button => {
            button.addEventListener('click', () => {
                const container = button.closest('.description-container');
                const shortDesc = container.querySelector('.description-short');
                const fullDesc = container.querySelector('.description-full');
                
                if (button.getAttribute('data-action') === 'expand') {
                    // Expandir
                    shortDesc.classList.add('hidden');
                    fullDesc.classList.remove('hidden');
                    button.textContent = 'Ver menos';
                    button.setAttribute('data-action', 'collapse');
                } else {
                    // Colapsar
                    shortDesc.classList.remove('hidden');
                    fullDesc.classList.add('hidden');
                    button.textContent = 'Ver más';
                    button.setAttribute('data-action', 'expand');
                }
            });
        });
    });
</script>

<style>
    .hidden {
        display: none;
    }
</style>